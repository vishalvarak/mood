  public function update_user_flags($flags)
    {
        global $DB;
        if ($flags->userid <= 0 || $flags->assignment <= 0 || $flags->id <= 0) {
            return false;
        }

        $sq = "SELECT e.extensionduedate, e.id FROM {assign_user_flags} e WHERE e.userid = :userid AND e.assignment = :assignment";
        // Parameters
        $param = array('userid' => $flags->userid, 'assignment' => $flags->assignment);

        $rec = $DB->get_records_sql($sq, $param);
        foreach ($rec as $record) {
            $edate = $record->extensionduedate;
            $eid = $record->id;
        }

        $ins = new stdClass();
        $er = 1;
        $ins->userid = $flags->userid;
        $ins->assignment = $flags->assignment;
        $ins->mailed = $eid;
        $ins->extensionduedate = $edate;
        $ins->locked = 1;

        // Define the table name
        $table = 'assign_due_date_extension';

        // Define the conditions
        $conditions = array(
            'userid' => $flags->userid,        // Example userid
            'assignment' => $flags->assignment // Example assignment
        );

        // Check if the record exists
        if ($DB->record_exists($table, $conditions)) {
            $sq = "SELECT e.id FROM {assign_due_date_extension} e WHERE e.userid = :userid AND e.assignment = :assignment";
            // Parameters
            $param = array('userid' => $flags->userid, 'assignment' => $flags->assignment);

            $rec = $DB->get_records_sql($sq, $param);
            foreach ($rec as $record) {
                $eidd = $record->id;
            }
            $ins->id = $eidd;

            $DB->update_record('assign_due_date_extension', $ins);
        } else {
            $DB->insert_record('assign_due_date_extension', $ins);
        }


        $result = $DB->update_record('assign_user_flags', $flags);
        return $result;
    }




function format_row($row)
    {
        $ur = $_SERVER['REQUEST_URI'];
        if (is_array($row)) {
            $row = (object) $row;
        }
        $formattedrow = array();
        $fl = 0;
        foreach (array_keys($this->columns) as $column) {
            $colmethodname = 'col_' . $column;
            if (method_exists($this, $colmethodname)) {
                $formattedcolumn = $this->$colmethodname($row);
            } else {
                $formattedcolumn = $this->other_cols($column, $row);
                if ($formattedcolumn === NULL) {
                    $formattedcolumn = $row->$column;
                }
            }
            $formattedrow[$column] = $formattedcolumn;
        }


        if (preg_match('/<div class="extensiondate">(.*?)<\/div>/', $formattedrow['status'], $matches)) {
            $extensionDateContent = $matches[1];
            preg_match('/id=(\d+)/', $formattedrow['fullname'], $matchess);

            if (isset($matchess[1])) {
                $idd = $matchess[1];

            } else {

            }

            preg_match('/id=(\d+)/', $formattedrow['grade'], $matchesss);

            if (isset($matchesss[1])) {
                $assignidd = $matchesss[1];

                global $DB;
                $sql = "SELECT a.name, a.course FROM mdl_assign a WHERE a.id = :id";
                $params = array('id' => $assignidd);

                $res = $DB->get_records_sql($sql, $params);

                if (count($res) == 0) {
                    $sql = "SELECT a.name, a.course FROM mdl_assign a WHERE a.id = :id";
                    $params = array('id' => $assignidd - 1);

                    $res = $DB->get_records_sql($sql, $params);
                }
                foreach ($res as $record) {
                    $aname = $record->name;
                    $cid = $record->course;
                    // Now $name contains the name corresponding to the provided ID
                    // You can use $name as needed
                }

                $sqll = "SELECT c.fullname FROM mdl_course c WHERE c.id = :id";
                $paramss = array('id' => $cid);

                $ress = $DB->get_records_sql($sqll, $paramss);
                foreach ($ress as $record) {
                    $cname = $record->fullname;

                }

            } else {

            }

            $sqll = "SELECT u.firstname, u.username FROM mdl_user u WHERE u.id = :id";
            $paramss = array('id' => $idd);

            $ress = $DB->get_records_sql($sqll, $paramss);
            foreach ($ress as $record) {
                $fname = $record->firstname;
                $uname = $record->username;

            }


            $sqll = "SELECT u.firstname, u.lastname
            FROM mdl_course c
            JOIN mdl_context ctx ON c.id = ctx.instanceid
            JOIN mdl_role_assignments ra ON ctx.id = ra.contextid
            JOIN mdl_user u ON ra.userid = u.id
            JOIN mdl_role r ON ra.roleid = r.id
            WHERE c.id = :id
            AND r.shortname = 'editingteacher'";
            $paramss = array('id' => $cid);

            $ress = $DB->get_records_sql($sqll, $paramss);
            foreach ($ress as $record) {
                $tfname = $record->firstname;
                $tlname = $record->lastname;

            }

            $extensionDateContentt = 'Dear ' . $fname . '(' . $uname . '),<br><br>';
            $extensionDateContentt .= 'You have been granted an extension for the Assessment ' . $aname . ' for the course ' . $cname . '<br>';
            $extensionDateContentt .= 'The ';
            $extensionDateContentt .= $extensionDateContent . '<br><br><br><br> Regards<br> ' . $tfname . ' ' . $tlname;

            $used = 2;

            $postsubject = 'Assessment due date extended for ' . $aname . ', ' . $cname;
            $eventdata = new \core\message\message();
            $eventdata->component = 'mod_assign';    // the component sending the message. Along with name this must exist in the table message_providers
            $eventdata->name = 'assign_notification';        // type of message from that module (as module defines it). Along with component this must exist in the table message_providers
            $eventdata->userfrom = $used;      // user object
            $eventdata->userto = $idd;       // user object
            $eventdata->subject = $postsubject;   // very short one-line subject
            $eventdata->fullmessage = $extensionDateContentt;      // raw text
            $eventdata->fullmessageformat = FORMAT_PLAIN;   // text format
            $eventdata->fullmessagehtml = $extensionDateContentt;      // html rendered version
            $eventdata->smallmessage = '';             // useful for plugins like sms or twitter

            $current_time = time();
            if ($row->extensionduedate > $current_time) {
                $sq = "SELECT COUNT(e.id) AS count FROM {assign_user_flags} e WHERE e.userid = :userid AND e.assignment = :assignment";
                // Parameters
                $param = array('userid' => $idd, 'assignment' => $assignidd - 1);

                $re = $DB->get_records_sql($sq, $param);
                $c = $re[1]->count;

                if ($c == 1) {
                    $sqq = "SELECT e.id FROM {assign_due_date_extension} e WHERE e.userid = :userid AND e.assignment = :assignment";
                    // Parameters
                    $paramm = array('userid' => $idd, 'assignment' => $assignidd - 1);

                    $recc = $DB->get_records_sql($sqq, $paramm);
                    foreach ($recc as $record) {
                        $eeid = $record->id;
                    }


                    $sq = "SELECT e.id, e.extensionduedate, e.locked, e.mailed FROM {assign_due_date_extension} e WHERE e.userid = :userid AND e.assignment = :assignment AND e.id = :eid";
                    // Parameters
                    $param = array('userid' => $idd, 'assignment' => $assignidd - 1, 'eid' => $eeid);

                    $rec = $DB->get_records_sql($sq, $param);
                    foreach ($rec as $record) {
                        $edate = $record->extensionduedate;
                        $etog = $record->locked;
                        $mailed = $record->mailed;
                        $eiid = $record->id;
                    }

                    if ($row->extensionduedate != $edate) {
                        if ($etog == 1) {
                            message_send($eventdata);
                            $ins = new stdClass();
                            $er = '0';
                            $ins->userid = $idd;
                            $ins->assignment = $assignidd - 1;
                            $ins->mailed = $mailed;
                            $ins->extensionduedate = $edate;
                            $ins->id = $eiid;
                            $ins->locked = $er;
                            $DB->update_record('assign_due_date_extension', $ins);
                        }
                    }
                } else {
                    // message_send($eventdata);
                }

            } elseif ($row->extensionduedate < $current_time) {
                //echo "The time is in the past.";
            } else {
                // message_send($eventdata);
            }





        } else {

        }

        return $formattedrow;
    }


CREATE TABLE new_table_name (
    id BIGINT(10) NOT NULL AUTO_INCREMENT,
    userid BIGINT(10) NOT NULL DEFAULT 0,
    assignment BIGINT(10) NOT NULL DEFAULT 0,
    locked BIGINT(10) NOT NULL DEFAULT 0,
    mailed SMALLINT(4) NOT NULL DEFAULT 0,
    extensionduedate BIGINT(10) NOT NULL DEFAULT 0,
    workflowstate VARCHAR(20) DEFAULT NULL,
    allocatedmarker BIGINT(10) NOT NULL DEFAULT 0,
    PRIMARY KEY (id),
    INDEX userid_index (userid),
    INDEX assignment_index (assignment),
    INDEX mailed_index (mailed)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
